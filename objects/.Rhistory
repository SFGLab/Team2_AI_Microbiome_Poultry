ww_1430601$Sample_Id<- "1430601"
## Making list to filter out only the amplicons for genotyping ( first 15)
ww_genomes<- list(ww_1110202,ww_1180202,ww_1220702,ww_1430202,ww_1430601)
ww_genomes<- sapply(ww_genomes, function(df) df[1:15, ], simplify = FALSE)
# merge all rows
ww_genomes<- do.call(rbind, ww_genomes)
View(ww_genomes)
class(ww_genomes)
library(ggplot2)
library(datasets)
library(data.table)
library(patchwork)
## Plot the coverage for each amplicon and facet by sample
(gp<- ggplot(data= ww_genomes, aes(x= X.rname, y= coverage, fill= X.rname))+
geom_bar(stat = "identity", position = "dodge")+
scale_fill_brewer(palette = "Set3")
theme_linedraw()+
labs(x= "Genotype Amplicons", y= "Amplicons Coverage % in WW metagenomes")
)
## Plot the coverage for each amplicon and facet by sample
(gp<- ggplot(data= ww_genomes, aes(x= X.rname, y= coverage, fill= X.rname))+
geom_bar(stat = "identity", position = "dodge")+
scale_fill_brewer(palette = "Set3")+
theme_linedraw()+
labs(x= "Genotype Amplicons", y= "Amplicons Coverage % in WW metagenomes")
)
## Plot the coverage for each amplicon and facet by sample
(gp<- ggplot(data= ww_genomes, aes(x= X.rname, y= coverage, fill= X.rname))+
geom_bar(stat = "identity", position = "dodge")+
scale_fill_brewer(palette = "Set3")+
theme(axis.text.x = element_text(angle= 90, size= 19, face= "bold"))+
theme_linedraw()+
labs(x= "Genotype Amplicons", y= "Amplicons Coverage % in WW metagenomes")
)
## Plot the coverage for each amplicon and facet by sample
(gp<- ggplot(data= ww_genomes, aes(x= X.rname, y= coverage, fill= X.rname))+
geom_bar(stat = "identity", position = "dodge")+
scale_fill_brewer(palette = "Set3")+
theme(axis.text.x = element_text(angle= 90, size= 19, face= "bold"))+
theme_linedraw()+
labs(x= "Genotype Amplicons", y= "Amplicons Coverage % in WW metagenomes")
)
## Plot the coverage for each amplicon and facet by sample
(gp<- ggplot(data= ww_genomes, aes(x= X.rname, y= coverage, fill= X.rname))+
geom_bar(stat = "identity", position = "dodge")+
#scale_fill_brewer(palette = "Set3")+
theme(axis.text.x = element_text(angle= 90, size= 19, face= "bold"))+
labs(x= "Genotype Amplicons", y= "Amplicons Coverage % in WW metagenomes")
)
## Plot the coverage for each amplicon and facet by sample
(gp<- ggplot(data= ww_genomes, aes(x= X.rname, y= coverage, fill= X.rname))+
geom_bar(stat = "identity", position = "dodge")+
#scale_fill_brewer(palette = "Set3")+
theme(axis.text.x = element_text(angle= 90, size= 15, face= "bold"))+
labs(x= "Genotype Amplicons", y= "Amplicons Coverage % in WW metagenomes")
)
## Plot the coverage for each amplicon and facet by sample
(gp<- ggplot(data= ww_genomes, aes(x= X.rname, y= coverage, fill= X.rname))+
geom_bar(stat = "identity", position = "dodge")+
#scale_fill_brewer(palette = "Set3")+
facet_wrap(~Sample_ID)+
theme(axis.text.x = element_text(angle= 90, size= 15, face= "bold"))+
labs(x= "Genotype Amplicons", y= "Amplicons Coverage % in WW metagenomes")
)
## Plot the coverage for each amplicon and facet by sample
(gp<- ggplot(data= ww_genomes, aes(x= X.rname, y= coverage, fill= X.rname))+
geom_bar(stat = "identity", position = "dodge")+
#scale_fill_brewer(palette = "Set3")+
facet_wrap(~Sample_Id)+
theme(axis.text.x = element_text(angle= 90, size= 15, face= "bold"))+
labs(x= "Genotype Amplicons", y= "Amplicons Coverage % in WW metagenomes")
)
## Plot the coverage for each amplicon and facet by sample
(gp<- ggplot(data= ww_genomes, aes(x= X.rname, y= coverage, fill= X.rname))+
geom_bar(stat = "identity", position = "dodge")+
#scale_fill_brewer(palette = "Set3")+
facet_wrap(~Sample_Id, scales = "free")+
theme(axis.text.x = element_text(angle= 90, size= 15, face= "bold"))+
labs(x= "Genotype Amplicons", y= "Amplicons Coverage % in WW metagenomes")
)
## do the same for ONT genotyped anton data
ont_path<- "/home/karthi/ES2/ont/"
run_samtools_coverage_all(ont_path)
ont_1110202<- read.csv("./ES2/ont/barcode20.coverage", sep="\t")
ont_1180202<- read.csv("./ES2/ont/barcode08.coverage", sep="\t")
ont_1220702<- read.csv("./ES2/ont/barcode09.coverage", sep="\t")
ont_1430202<- read.csv("./ES2/ont/barcode07.coverage", sep="\t")
ont_1430601<- read.csv("./ES2/ont/barcode08_6.coverage", sep="\t")
## add the sample name into the dataframe as sample_id
ont_1110202$Sample_Id<- "1110202"
ont_1180202$Sample_Id<- "1180202"
ont_1220702$Sample_Id<- "1220702"
ont_1430202$Sample_Id<- "1430202"
ont_1430601$Sample_Id<- "1430601"
ont_1110202$Sample_Id<- "1110202_ONT"
ont_1180202$Sample_Id<- "1180202_ONT"
ont_1220702$Sample_Id<- "1220702_ONT"
ont_1430202$Sample_Id<- "1430202_ONT"
ont_1430601$Sample_Id<- "1430601_ONT"
ont_genomes<- list(ont_1110202,ont_1180202,ont_1220702,ont_1430202,ont_1430601)
ont_genomes<- sapply(ont_genomes, function(df) df[1:15, ], simplify = FALSE)
ont_genomes<- do.call(rbind, ont_genomes)
View(ont_genomes)
## Import the coverage files into data frame
ont_1110202<- read.csv("./ES2/ont/barcode20.coverage", sep="\t")
ont_1180202<- read.csv("./ES2/ont/barcode08.coverage", sep="\t")
ont_1220702<- read.csv("./ES2/ont/barcode09.coverage", sep="\t")
ont_1430202<- read.csv("./ES2/ont/barcode07.coverage", sep="\t")
ont_1430601<- read.csv("./ES2/ont/barcode08_6.coverage", sep="\t")
## add the sample name into the dataframe as sample_id
ont_1110202$Sample_Id<- "1110202_ONT"
ont_1180202$Sample_Id<- "1180202_ONT"
ont_1220702$Sample_Id<- "1220702_ONT"
ont_1430202$Sample_Id<- "1430202_ONT"
ont_1430601$Sample_Id<- "1430601_ONT"
## Making list to filter out only the amplicons for genotyping ( first 15)
ont_genomes<- list(ont_1110202,ont_1180202,ont_1220702,ont_1430202,ont_1430601)
ont_genomes<- sapply(ont_genomes, function(df) df[1:15, ], simplify = FALSE)
# merge all rows
ont_genomes<- do.call(rbind, ont_genomes)
View(ont_genomes)
class(ont_genomes)
## Plot the coverage for each amplicon and facet by sample
(gp_ont<- ggplot(data= ont_genomes, aes(x= X.rname, y= coverage, fill= X.rname))+
geom_bar(stat = "identity", position = "dodge")+
#scale_fill_brewer(palette = "Set3")+
facet_wrap(~Sample_Id, scales = "free")+
theme(axis.text.x = element_text(angle= 90, size= 15, face= "bold"))+
labs(x= "Genotype Amplicons", y= "Amplicons Coverage % in ont metagenomes")
)
merge_df<- rbind(ont_genomes, ww_genomes)
View(merge_df)
# sort the Sample_Id
merge_df2<- sort(merge_df$Sample_Id, decreasing = T)
# sort the Sample_Id
merge_df$Sample_Id<- sort(merge_df$Sample_Id, decreasing = T)
View(merge_df)
# sort the Sample_Id
merge_df$Sample_Id<- sort(merge_df$Sample_Id, decreasing = F)
##
(gp_mer<- ggplot(data= merge_df, aes(x= X.rname, y= coverage, fill= X.rname))+
geom_bar(stat = "identity", position = "dodge")+
#scale_fill_brewer(palette = "Set3")+
facet_wrap(~Sample_Id, scales = "free")+
theme(axis.text.x = element_text(angle= 90, size= 15, face= "bold"))+
labs(x= "Genotype Amplicons", y= "Amplicons Coverage % in ont metagenomes")
)
##
(gp_mer<- ggplot(data= merge_df, aes(x= X.rname, y= coverage, fill= X.rname))+
geom_bar(stat = "identity", position = "dodge")+
#scale_fill_brewer(palette = "Set3")+
facet_wrap(~Sample_Id, scales = "free")+
theme(axis.text.x = element_text(angle= 90, size= 10, face= "bold"))+
labs(x= "Genotype Amplicons", y= "Amplicons Coverage % in ont metagenomes")
)
# sort the Sample_Id
merge_df$Sample_Id<- order(merge_df$Sample_Id, decreasing = F)
View(merge_df)
merge_df<- rbind(ont_genomes, ww_genomes)
View(merge_df)
# sort the Sample_Id
merge_df$Sample_Id<- merge_df[order(merge_df$Sample_Id, decreasing = F), ]
merge_df<- rbind(ont_genomes, ww_genomes)
merge_df$Sample_Id<- merge_df[order(merge_df$Sample_Id, decreasing = F), ]
# sort the Sample_Id
merge_df$Sample_Id<- merge_df[order(merge_df$Sample_Id, decreasing = F) ]
merge_df<- rbind(ont_genomes, ww_genomes)
# sort the Sample_Id
merge_df$Sample_Id<- merge_df[order(merge_df$Sample_Id, decreasing = F) ]
merge_df<- rbind(ont_genomes, ww_genomes)
# sort the Sample_Id
merge_df<- merge_df[order(merge_df$Sample_Id, decreasing = F), ]
(gp_mer<- ggplot(data= merge_df, aes(x= X.rname, y= coverage, fill= X.rname))+
geom_bar(stat = "identity", position = "dodge")+
#scale_fill_brewer(palette = "Set3")+
facet_wrap(~Sample_Id, scales = "free")+
theme(axis.text.x = element_text(angle= 90, size= 10, face= "bold"))+
labs(x= "Genotype Amplicons", y= "Amplicons Coverage % in ont metagenomes")
)
save.image("~/ES2/scripts/coverage_WW.RData")
(gp_mer<- ggplot(data= merge_df, aes(x= X.rname, y= coverage, fill= X.rname))+
geom_bar(stat = "identity", position = "dodge")+
#scale_fill_brewer(palette = "Set3")+
facet_wrap(~Sample_Id, scales = "free")+
theme(axis.text.x = element_text(angle= 90, size= 10, face= "bold"))+
labs(x= "Genotype Amplicons", y= "Amplicons Coverage % in ont metagenomes")
)
library(sjPlot)
df <- mtcars[c("Mazda RX4", "Datsun 710", "Hornet 4 Drive", "Merc 240D"),
c("mpg", "cyl", "hp", "wt")]
df$car <- rownames(df)
rownames(df) <- NULL
library(ggplot2)
ggplot(df, aes(x = wt, y = mpg, color = factor(cyl), label = car)) +
geom_point(size = 4) +
geom_text(vjust = -1.2, size = 3.5) +
labs(
title = "MPG vs Weight of Selected Cars",
x = "Weight (1000 lbs)",
y = "Miles per Gallon",
color = "Cylinders"
) +
theme_minimal()
# Small sample of mtcars
df <- mtcars[c("Mazda RX4", "Datsun 710", "Hornet 4 Drive", "Merc 240D"),
c("mpg", "cyl", "hp", "wt")]
df$car <- rownames(df)
rownames(df) <- NULL
library(ggplot2)
ggplot(df, aes(x = wt, y = mpg, color = factor(cyl), label = car)) +
geom_point(size = 4) +
geom_text(vjust = -1.2, size = 3.5) +
labs(
title = "MPG vs Weight of Selected Cars",
x = "Weight (1000 lbs)",
y = "Miles per Gallon",
color = "Cylinders"
) +
theme_minimal()
# Small sample of mtcars
df <- mtcars[c("Mazda RX4", "Datsun 710", "Hornet 4 Drive", "Merc 240D"),
c("mpg", "cyl", "hp", "wt")]
df$car <- rownames(df)
rownames(df) <- NULL
library(ggplot2)
ggplot(df, aes(x = wt, y = mpg, color = factor(cyl), label = car)) +
geom_point(size = 4) +
geom_text(vjust = -1.2, size = 3.5) +
labs(
title = "MPG vs Weight of Selected Cars",
x = "Weight (1000 lbs)",
y = "Miles per Gallon",
color = "Cylinders"
) +
theme_minimal()
Sys.getlocale()
Sys.setlocale("LC_CTYPE", "en_US.UTF-8")
df <- mtcars[c("Mazda RX4", "Datsun 710", "Hornet 4 Drive", "Merc 240D"),
c("mpg", "cyl", "hp", "wt")]
df$car <- rownames(df)
rownames(df) <- NULL
library(ggplot2)
ggplot(df, aes(x = wt, y = mpg, color = factor(cyl), label = car)) +
geom_point(size = 4) +
geom_text(vjust = -1.2, size = 3.5) +
labs(
title = "MPG vs Weight of Selected Cars",
x = "Weight (1000 lbs)",
y = "Miles per Gallon",
color = "Cylinders"
) +
theme_minimal()
Sys.getlocale()
Sys.setlocale("LC_CTYPE", "en_US.UTF-8")
Sys.getlocale()
library(ggplot2)
# Small sample of mtcars
df <- mtcars[c("Mazda RX4", "Datsun 710", "Hornet 4 Drive", "Merc 240D"),
c("mpg", "cyl", "hp", "wt")]
df$car <- rownames(df)
rownames(df) <- NULL
ggplot(df, aes(x = wt, y = mpg, color = factor(cyl), label = car)) +
geom_point(size = 4) +
geom_text(vjust = -1.2, size = 3.5) +
labs(
title = "MPG vs Weight of Selected Cars",
x = "Weight (1000 lbs)",
y = "Miles per Gallon",
color = "Cylinders"
) +
theme_minimal()
df <- mtcars[c("Mazda RX4", "Datsun 710", "Hornet 4 Drive", "Merc 240D"),
c("mpg", "cyl", "hp", "wt")]
df$car <- rownames(df)
rownames(df) <- NULL
library(ggplot2)
ggplot(df, aes(x = wt, y = mpg, color = factor(cyl), label = car)) +
geom_point(size = 4) +
geom_text(vjust = -1.2, size = 3.5) +
labs(
title = "MPG vs Weight of Selected Cars",
x = "Weight (1000 lbs)",
y = "Miles per Gallon",
color = "Cylinders"
) +
theme_minimal()
Sys.getlocale()
Sys.setlocale("LC_CTYPE", "en_US.UTF-8")
# Small sample of mtcars
df <- mtcars[c("Mazda RX4", "Datsun 710", "Hornet 4 Drive", "Merc 240D"),
c("mpg", "cyl", "hp", "wt")]
df$car <- rownames(df)
rownames(df) <- NULL
library(ggplot2)
ggplot(df, aes(x = wt, y = mpg, color = factor(cyl), label = car)) +
geom_point(size = 4) +
geom_text(vjust = -1.2, size = 3.5) +
labs(
title = "MPG vs Weight of Selected Cars",
x = "Weight (1000 lbs)",
y = "Miles per Gallon",
color = "Cylinders"
) +
theme_minimal()
ggplot(df, aes(x = wt, y = mpg, color = factor(cyl), label = car)) +
geom_point(size = 4) +
geom_text(vjust = -1.2, size = 3.5) +
labs(
title = "MPG vs Weight of Selected Cars",
x = "Weight (1000 lbs)",
y = "Miles per Gallon",
color = "Cylinders"
) +
theme_minimal()
df <- mtcars[c("Mazda RX4", "Datsun 710", "Hornet 4 Drive", "Merc 240D"),
c("mpg", "cyl", "hp", "wt")]
df$car <- rownames(df)
rownames(df) <- NULL
library(ggplot2)
ggplot(df, aes(x = wt, y = mpg, color = factor(cyl), label = car)) +
geom_point(size = 4) +
geom_text(vjust = -1.2, size = 3.5) +
labs(
title = "MPG vs Weight of Selected Cars",
x = "Weight (1000 lbs)",
y = "Miles per Gallon",
color = "Cylinders"
) +
theme_minimal()
plot(1:10)
plot(1:10, family = "DejaVuSans")
file.edit("~/.Rprofile")
plot(1:10, family = "DejaVuSans")
plot(1:10)
plot(1:10)
load("~/bioai/dada2.RData")
phylum_level <- tax_glom(ps, "Phylum")
# Transform to relative abundance
phylum_relabund <- transform_sample_counts(phylum_level, function(x) x / sum(x))
phylum_melted <- psmelt(phylum_relabund)
str(phylum_melted)
# Create the barplot
(tp<- ggplot(phylum_melted, aes(x = sample_alias, y = Abundance, fill = Phylum)) +
geom_bar(stat = "identity", position = "stack") +
theme_linedraw() +
labs(title = "Relative Abundance of Phylum", y = "Relative Abundance", x = "Sample") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
)
library(dada2); packageVersion("dada2")
library(phyloseq)
library(data.table)
library(ggplot2)
library(patchwork) # for stiching pictures
library(dplyr)
library(vegan)
(tp<- ggplot(phylum_melted, aes(x = sample_alias, y = Abundance, fill = Phylum)) +
geom_bar(stat = "identity", position = "stack") +
theme_linedraw() +
labs(title = "Relative Abundance of Phylum", y = "Relative Abundance", x = "Sample") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
)
genus_level <- tax_glom(ps, "Genus")
# Transform to relative abundance
genus_relabund <- transform_sample_counts(genus_level, function(x) x / sum(x))
# Melt the data for ggplot
genus_melted <- psmelt(genus_relabund)
# Create the barplot
ggplot(genus_melted, aes(x = Sample, y = Abundance, fill = group)) +
geom_bar(stat = "identity", position = "stack") +
theme_linedraw() +
labs(title = "Relative Abundance of Genera", y = "Relative Abundance", x = "Sample") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Create the barplot
ggplot(genus_melted, aes(x = Sample, y = Abundance, fill = Genus)) +
geom_bar(stat = "identity", position = "stack") +
theme_linedraw() +
labs(title = "Relative Abundance of Genera", y = "Relative Abundance", x = "Sample") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
sample_variables(ps) # Display variables from the mapping file
ntaxa(ps) # Total number of taxa in the entire data
rank_names(ps) # Taxonomic ranks
taxa_gen<- get_taxa_unique(ps, "Genus") # Unique genus names in the file
taxa_spc<- get_taxa_unique(ps, "Species") # Unique genus names in the file
ps2 <- subset_taxa(ps, !(is.na(Phylum)))
ps2
taxtab <- tax_table(ps)
taxa_table <- otu_table(ps)
taxa_table <- as.matrix(otu_table(ps))
View(taxa_table)
taxa_table <- as.data.table(otu_table(ps))
View(taxa_table)
##
genus_taxa <- as.data.frame(otu_table(genus_relabund))
View(genus_taxa)
tax_table_genus <- tax_table(genus_taxa)
View(tax_table_genus)
View(genus_melted)
genus_names <- as.character(tax_table_genus[, "Genus"])
tax_table_genus <- tax_table(genus_taxa)
genus_names <- as.character(tax_table_genus[, "Genus"])
# Agglomerate to genus level
# genus <- tax_glom(ps, taxrank = "Genus")
# Taxonomic table
taxtab <- as(tax_table(genus_level), "matrix")
taxtab <- as.data.frame(taxtab)
tax_df<- otu_table(genus_level, "matrix")
tax_df<- as.data.frame(tax_df)
matching_cols <- intersect(colnames(tax_df), rownames(taxtab))
colnames(tax_df)[colnames(tax_df) %in% matching_cols] <- taxtab$Genus[rownames(taxtab) %in% matching_cols]
dim(tax_df)
View(tax_df)
# Agglomerate to genus level
# genus <- tax_glom(ps, taxrank = "Genus")
# Taxonomic table
taxtab <- as(tax_table(genus_relabund), "matrix")
taxtab <- as.data.frame(taxtab)
tax_df<- otu_table(genus_level, "matrix")
tax_df<- as.data.frame(tax_df)
# Match column names of otu_table with genus names in genus_data
matching_cols <- intersect(colnames(tax_df), rownames(taxtab))
# Rename columns in otu_table based on matched genus names
colnames(tax_df)[colnames(tax_df) %in% matching_cols] <- taxtab$Genus[rownames(taxtab) %in% matching_cols]
# now the otu table of tax_df has sample ids has rows and genus names as columns, data is reduced by only taxa contains genus names
dim(tax_df)
View(tax_df)
# Agglomerate to genus level
# genus <- tax_glom(ps, taxrank = "Genus")
# Taxonomic table
taxtab <- as(tax_table(genus_relabund), "matrix")
taxtab <- as.data.frame(taxtab)
tax_df<- otu_table(genus_relabund, "matrix")
tax_df<- as.data.frame(tax_df)
# Match column names of otu_table with genus names in genus_data
matching_cols <- intersect(colnames(tax_df), rownames(taxtab))
# Rename columns in otu_table based on matched genus names
colnames(tax_df)[colnames(tax_df) %in% matching_cols] <- taxtab$Genus[rownames(taxtab) %in% matching_cols]
# now the otu table of tax_df has sample ids has rows and genus names as columns, data is reduced by only taxa contains genus names
dim(tax_df)
View(tax_df)
# Ensure rownames match and are aligned
genus_abundance <- genus_abundance[rownames(meta), ]
# Ensure rownames match and are aligned
genus_abundance <- tax_df[rownames(meta), ]
View(genus_abundance)
# Left bind (metadata on the left, genus abundance on the right)
combined_data <- cbind(genus_abundance, meta)
View(combined_data)
# Left bind (metadata on the left, genus abundance on the right)
Genus_taxa <- cbind(genus_abundance, meta)
View(Genus_taxa)
Genus_taxa$site <- substr(Genus_taxa$sample_alias, nchar(Genus_taxa$sample_alias), nchar(Genus_taxa$sample_alias))
##  Taxa at species level
# Aggregate data on the genus level
species_level <- tax_glom(ps, "Species")
species_relabund <- transform_sample_counts(species_level, function(x) x / sum(x))
taxtab_spe <- as(tax_table(species_relabund), "matrix")
taxtab-spe <- as.data.frame(taxtab)
taxtab-spe <- as.data.frame(taxtab_spe)
taxtab_spe <- as.data.frame(taxtab_spe)
tax_df_spe<- otu_table(species_relabund, "matrix")
tax_df_spe<- as.data.frame(tax_df_spe)
View(taxtab_spe)
View(tax_df_spe)
matching_cols <- intersect(colnames(tax_df), rownames(taxtab))
View(taxtab_spe)
# Merge Genus and Species columns with an underscore to make the species detection easy
taxtab_spe$Genus_Species <- paste(taxtab_spe$Genus, taxtab_spe$Species, sep = "_")
tax_df_spe<- otu_table(species_relabund, "matrix")
tax_df_spe<- as.data.frame(tax_df_spe)
# Match column names of otu_table with species names in species_data
matching_cols <- intersect(colnames(tax_df), rownames(taxtab))
# Rename columns in otu_table based on matched species names
colnames(tax_df)[colnames(tax_df) %in% matching_cols] <-
taxtab$Genus_Species[rownames(taxtab) %in% matching_cols]
# Match column names of otu_table with species names in species_data
matching_cols <- intersect(colnames(tax_df_spe), rownames(taxtab_spe))
# Match column names of otu_table with species names in species_data
matching_cols_spe <- intersect(colnames(tax_df_spe), rownames(taxtab_spe))
# Construct Taxonomic table
taxtab_spe <- as(tax_table(species_relabund), "matrix")
taxtab_spe <- as.data.frame(taxtab_spe)
# Merge Genus and Species columns with an underscore to make the species detection easy
taxtab_spe$Genus_Species <- paste(taxtab_spe$Genus, taxtab_spe$Species, sep = "_")
tax_df_spe<- otu_table(species_relabund, "matrix")
tax_df_spe<- as.data.frame(tax_df_spe)
matching_cols_spe <- intersect(colnames(tax_df_spe), rownames(taxtab_spe))
colnames(tax_df_spe)[colnames(tax_df_spe) %in% matching_cols_spe] <-
taxtab_spe$Genus_Species[rownames(taxtab_spe) %in% matching_cols_spe]
# # tax_df has sample IDs as rows and species names as columns
# the data includes only taxa that have valid species-level names.
dim(tax_df_spe)
View(tax_df_spe)
# Ensure rownames match and are aligned in before merging the metadata.
species_abundance <- tax_df_spe[rownames(meta), ]
# Left bind (metadata on the left, species abundance on the right)
species_taxa <- cbind(species_abundance, meta)
species_taxa$site <- substr(species_taxa$sample_alias,
nchar(species_taxa$sample_alias),
nchar(species_taxa$sample_alias))
View(species_taxa)
Species_taxa <- cbind(species_abundance, meta)
# make one more colum based on the group jejunum mucosa and content
# extract the last character of a string from sample_alias and assign
#it to a new column site in the species_taxa
Species_taxa$site <- substr(species_taxa$sample_alias,
nchar(species_taxa$sample_alias),
nchar(species_taxa$sample_alias))
write.csv(Genus_taxa, file = "/home/karthi/bioai/Team2_AI_Microbiome_Poultry/objects/Genus_taxonomy.csv")
debugSource('~/bioai/dada2_script.R')
write.csv(Species_taxa, file = "/home/karthi/bioai/Team2_AI_Microbiome_Poultry/objects/Senus_taxonomy.csv")
save.image("~/bioai/dada2.RData")
setwd("/home/karthi/bioai/Team2_AI_Microbiome_Poultry/objects")
